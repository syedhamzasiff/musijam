generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id         String    @id @default(uuid())
  email      String    @unique
  username   String
  password   String
  isPremium  Boolean   @default(false) // Premium user status
  groups     Group[]   @relation("group_members")  // Groups user is a member of
  createdGroups Group[] @relation("group_creator") // Groups user has created
  streams    Stream[]  @relation("user_streams")   // Streams user has created
  upvotes    Upvote[]  // Upvotes user has given to streams
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Group Model
model Group {
  id         String    @id @default(uuid())
  name       String
  creatorId  String
  creator    User      @relation("group_creator", fields: [creatorId], references: [id]) // Group creator
  members    User[]    @relation("group_members")  // Users who are members of the group
  streams    Stream[]  @relation("group_streams")  // Streams in the group
  createdAt  DateTime  @default(now())
}

// Stream Model
model Stream {
  id         String    @id @default(uuid())
  type       StreamType
  url        String
  title      String    @default("")
  smallImg   String    @default("")
  bigImg     String    @default("")
  genre      String    // Add genre field to store music genre
  played     Boolean   @default(false)
  playedTs   DateTime?
  userId     String
  user       User      @relation(fields: [userId], references: [id], name: "user_streams")  // Stream creator
  groupId    String
  group      Group     @relation(fields: [groupId], references: [id], name: "group_streams") // Group the stream belongs to
  upvotes    Upvote[]  // Users who have upvoted this stream
  createdAt  DateTime  @default(now())
}

// Upvote Model
model Upvote {
  id         String    @id @default(uuid())
  userId     String
  streamId   String
  user       User      @relation(fields: [userId], references: [id]) // User who upvoted
  stream     Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade) // Stream that was upvoted
  
  @@unique([userId, streamId]) // Ensure user can only upvote a stream once
}

// Enum for Stream Types
enum StreamType {
  Spotify
  Youtube
}
